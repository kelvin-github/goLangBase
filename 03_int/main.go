package main

import "fmt"

// uint8 = 0-256 (2的8次方)
// uint16 = 0-65536 (2的16次方)

// int8 = 2的8次方（-256/2 ~ + 256/2-1，留了一个正值，用于 记录符号 ）
// int16 = 2的16次方（-65536/2 ~ + 65536/2-1，留了一个正值，用于 记录符号 ）

// 特殊整形
// uint (32位系统，就是 uint32; 64位系统，就是 uint64 )
// int (32位系统，就是 int32; 64位系统，就是 int64 )
// uintptr (没有符号的整形 ，存放 一个 指针 地址)

// %d 10进制; %b 2进制;
// %o 10进制换成8进制;
// %x 10进制换成16进制

// 总结 不知道自己 要的变量 会多大，一律 int 就好，程序自己分析（8/16/32/64），但是 计算 时 要统一 int 的类型，一律向上 转型

func main(){
    var a int = 10  //默认十进制赋值
    fmt.Printf("10进制：%d \n",a) 
    fmt.Printf("8进制：%o \n",a) //1234567 1 11 12
    fmt.Printf("16进制：%x \n",a) //123456789 a

    var b int = 077 //八进制赋值，0 开头
    fmt.Printf("八进制：%o \n",b)

    var c int = 0xff //十六进制，0x 开头
    fmt.Printf("16进制：%d %x  \n",c,c)
    // fmt.Printf("10进制：%d \n",c)
}